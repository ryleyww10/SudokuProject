#include <iostream>
using namespace std;

//new game can generate player board to be viewed, can switch player by taking mod of missCount, will check to see if correct answer
void newGame(int matrix[], int a){
    int player1, player2;
    int missCount;
    int missing;
    int locat, playerGuess;
    int a1,a2,a3,a4,a5,a6,a7,a8,a9,b1,b2,b3,b4,b5,b6,b7,b8,b9,c1,c2,c3,c4,c5,c6,c7,c8,c9;
    int d1,d2,d3,d4,d5,d6,d7,d8,d9,e1,e2,e3,e4,e5,e6,e7,e8,e9,f1,f2,f3,f4,f5,f6,f7,f8,f9;
    int g1,g2,g3,g4,g5,g6,g7,g8,g9,h1,h2,h3,h4,h5,h6,h7,h8,h9,i1,i2,i3,i4,i5,i6,i7,i8,i9;
    bool solved=false;
    switch(a){
        case 1:
            a1=9, a2=0, a3=0, a4=0, a5=0, a6=0, a7=0, a8=0, a9=8;
            b1=0, b2=3, b3=0, b4=8, b5=0, b6=7, b7=0, b8=6, b9=0;
            c1=0, c2=0, c3=7, c4=0, c5=0, c6=0, c7=1, c8=0, c9=0;
            d1=0, d2=9, d3=0, d4=6, d5=0, d6=4, d7=0, d8=5, d9=0;
            e1=0, e2=0, e3=0, e4=0, e5=2, e6=0, e7=0, e8=0, e9=0;
            f1=0, f2=8, f3=0, f4=5, f5=0, f6=3, f7=0, f8=9, f9=0;
            g1=0, g2=0, g3=6, g4=0, g5=0, g6=0, g7=8, g8=0, g9=0;
            h1=0, h2=5, h3=0, h4=3, h5=0, h6=9, h7=0, h8=4, h9=0;
            i1=0, i2=0, i3=0, i4=0, i5=0, i6=0, i7=0, i8=0, i9=6;
            break;
        case 2:
            a1=0, a2=0, a3=0, a4=0, a5=3, a6=0, a7=0, a8=1, a9=0;
            b1=1, b2=8, b3=0, b4=0, b5=6, b6=0, b7=0, b8=5, b9=0;
            c1=0, c2=0, c3=5, c4=7, c5=0, c6=0, c7=9, c8=0, c9=0;
            d1=0, d2=0, d3=0, d4=5, d5=0, d6=2, d7=1, d8=0, d9=0;
            e1=9, e2=1, e3=0, e4=0, e5=0, e6=0, e7=0, e8=7, e9=3;
            f1=0, f2=0, f3=8, f4=9, f5=0, f6=3, f7=0, f8=0, f9=0;
            g1=0, g2=0, g3=1, g4=0, g5=0, g6=6, g7=4, g8=0, g9=0;
            h1=0, h2=2, h3=0, h4=0, h5=8, h6=0, h7=0, h8=9, h9=1;
            i1=0, i2=6, i3=0, i4=0, i5=5, i6=0, i7=0, i8=0, i9=0;
            break;
        case 3:
            a1=0, a2=0, a3=0, a4=0, a5=6, a6=0, a7=0, a8=4, a9=0;
            b1=9, b2=1, b3=0, b4=0, b5=4, b6=0, b7=0, b8=2, b9=0;
            c1=0, c2=0, c3=4, c4=1, c5=0, c6=0, c7=3, c8=0, c9=0;
            d1=0, d2=0, d3=0, d4=5, d5=0, d6=2, d7=8, d8=0, d9=0;
            e1=5, e2=7, e3=0, e4=0, e5=0, e6=0, e7=0, e8=9, e9=6;
            f1=0, f2=0, f3=3, f4=6, f5=0, f6=9, f7=0, f8=0, f9=0;
            g1=0, g2=0, g3=9, g4=0, g5=0, g6=1, g7=7, g8=0, g9=0;
            h1=0, h2=2, h3=0, h4=0, h5=9, h6=0, h7=0, h8=8, h9=1;
            i1=0, i2=4, i3=0, i4=0, i5=3, i6=0, i7=0, i8=0, i9=0;
            break;
        case 4:
            a1=2, a2=0, a3=0, a4=0, a5=0, a6=0, a7=6, a8=9, a9=0;
            b1=0, b2=5, b3=0, b4=0, b5=0, b6=3, b7=0, b8=0, b9=0;
            c1=1, c2=7, c3=0, c4=0, c5=0, c6=9, c7=4, c8=0, c9=5;
            d1=0, d2=0, d3=3, d4=0, d5=2, d6=5, d7=0, d8=1, d9=8;
            e1=0, e2=0, e3=0, e4=0, e5=4, e6=0, e7=0, e8=0, e9=0;
            f1=7, f2=2, f3=0, f4=3, f5=8, f6=0, f7=5, f8=0, f9=0;
            g1=5, g2=0, g3=2, g4=6, g5=0, g6=0, g7=0, g8=4, g9=1;
            h1=0, h2=0, h3=0, h4=5, h5=0, h6=0, h7=0, h8=7, h9=0;
            i1=0, i2=6, i3=7, i4=0, i5=0, i6=0, i7=0, i8=0, i9=3;
            break;
        case 5:
            a1=0, a2=0, a3=6, a4=5, a5=0, a6=0, a7=0, a8=0, a9=8;
            b1=0, b2=9, b3=5, b4=0, b5=0, b6=0, b7=0, b8=2, b9=0;
            c1=7, c2=0, c3=0, c4=9, c5=0, c6=0, c7=3, c8=0, c9=0;
            d1=0, d2=0, d3=0, d4=0, d5=4, d6=0, d7=2, d8=7, d9=0;
            e1=0, e2=0, e3=0, e4=8, e5=7, e6=3, e7=0, e8=0, e9=0;
            f1=0, f2=7, f3=9, f4=0, f5=5, f6=0, f7=0, f8=0, f9=0;
            g1=0, g2=0, g3=2, g4=0, g5=0, g6=8, g7=0, g8=0, g9=9;
            h1=0, h2=5, h3=0, h4=0, h5=0, h6=0, h7=8, h8=1, h9=0;
            i1=3, i2=0, i3=0, i4=0, i5=0, i6=5, i7=4, i8=0, i9=0;
            break;
        case 6:
            a1=0, a2=0, a3=2, a4=7, a5=8, a6=0, a7=0, a8=0, a9=3;
            b1=0, b2=0, b3=0, b4=0, b5=0, b6=9, b7=8, b8=0, b9=1;
            c1=4, c2=0, c3=0, c4=0, c5=0, c6=3, c7=0, c8=7, c9=0;
            d1=9, d2=0, d3=5, d4=0, d5=0, d6=8, d7=0, d8=0, d9=0;
            e1=0, e2=0, e3=0, e4=0, e5=7, e6=0, e7=0, e8=0, e9=0;
            f1=0, f2=0, f3=0, f4=5, f5=0, f6=0, f7=4, f8=0, f9=8;
            g1=0, g2=6, g3=0, g4=4, g5=0, g6=0, g7=0, g8=0, g9=7;
            h1=3, h2=0, h3=9, h4=8, h5=0, h6=0, h7=0, h8=0, h9=0;
            i1=8, i2=0, i3=0, i4=0, i5=3, i6=1, i7=6, i8=0, i9=0;
            break;
        case 7:
            a1=0, a2=0, a3=1, a4=3, a5=0, a6=2, a7=0, a8=0, a9=0;
            b1=0, b2=0, b3=3, b4=0, b5=0, b6=7, b7=0, b8=4, b9=5;
            c1=0, c2=0, c3=7, c4=0, c5=0, c6=0, c7=0, c8=0, c9=9;
            d1=0, d2=0, d3=6, d4=5, d5=0, d6=0, d7=0, d8=7, d9=0;
            e1=2, e2=0, e3=0, e4=0, e5=0, e6=0, e7=0, e8=0, e9=1;
            f1=0, f2=9, f3=0, f4=0, f5=0, f6=1, f7=4, f8=0, f9=0;
            g1=5, g2=0, g3=0, g4=0, g5=0, g6=0, g7=9, g8=0, g9=0;
            h1=6, h2=1, h3=0, h4=2, h5=0, h6=0, h7=8, h8=0, h9=0;
            i1=0, i2=0, i3=0, i4=9, i5=0, i6=8, i7=5, i8=0, i9=0;
            break;
        case 8:
            a1=0, a2=7, a3=0, a4=0, a5=0, a6=0, a7=0, a8=0, a9=4;
            b1=0, b2=5, b3=0, b4=0, b5=7, b6=0, b7=8, b8=0, b9=0;
            c1=0, c2=8, c3=0, c4=9, c5=5, c6=0, c7=0, c8=0, c9=0;
            d1=0, d2=9, d3=0, d4=2, d5=0, d6=0, d7=5, d8=0, d9=1;
            e1=0, e2=0, e3=1, e4=0, e5=0, e6=0, e7=4, e8=0, e9=0;
            f1=7, f2=0, f3=5, f4=0, f5=0, f6=1, f7=0, f8=3, f9=0;
            g1=0, g2=0, g3=0, g4=0, g5=1, g6=6, g7=0, g8=8, g9=0;
            h1=0, h2=0, h3=2, h4=0, h5=3, h6=0, h7=0, h8=4, h9=0;
            i1=4, i2=0, i3=0, i4=0, i5=0, i6=0, i7=0, i8=6, i9=0;
            break;
        case 9:
            a1=0, a2=9, a3=6, a4=0, a5=0, a6=8, a7=0, a8=0, a9=0;
            b1=1, b2=0, b3=0, b4=0, b5=0, b6=0, b7=0, b8=0, b9=3;
            c1=0, c2=0, c3=0, c4=9, c5=0, c6=2, c7=0, c8=8, c9=0;
            d1=0, d2=5, d3=7, d4=8, d5=0, d6=0, d7=0, d8=0, d9=0;
            e1=0, e2=0, e3=0, e4=0, e5=0, e6=0, e7=0, e8=0, e9=0;
            f1=3, f2=0, f3=0, f4=0, f5=0, f6=9, f7=1, f8=6, f9=0;
            g1=0, g2=2, g3=0, g4=3, g5=0, g6=5, g7=0, g8=0, g9=0;
            h1=7, h2=0, h3=0, h4=0, h5=0, h6=0, h7=0, h8=0, h9=4;
            i1=0, i2=0, i3=0, i4=2, i5=0, i6=0, i7=5, i8=9, i9=0;
            break;
        case 10:
            a1=0, a2=0, a3=0, a4=8, a5=0, a6=0, a7=9, a8=0, a9=0;
            b1=0, b2=9, b3=0, b4=0, b5=7, b6=0, b7=0, b8=0, b9=4;
            c1=0, c2=8, c3=4, c4=0, c5=0, c6=0, c7=0, c8=6, c9=0;
            d1=0, d2=0, d3=0, d4=4, d5=1, d6=0, d7=2, d8=0, d9=0;
            e1=0, e2=0, e3=3, e4=0, e5=0, e6=0, e7=5, e8=0, e9=0;
            f1=0, f2=0, f3=1, f4=0, f5=6, f6=9, f7=0, f8=0, f9=0;
            g1=0, g2=2, g3=0, g4=0, g5=0, g6=0, g7=7, g8=4, g9=0;
            h1=9, h2=0, h3=0, h4=0, h5=2, h6=0, h7=0, h8=3, h9=0;
            i1=0, i2=0, i3=7, i4=0, i5=0, i6=6, i7=0, i8=0, i9=0;
            break;
    }
    int gameState[] = {a1,a2,a3,a4,a5,a6,a7,a8,a9,b1,b2,b3,b4,b5,b6,b7,b8,b9,c1,c2,c3,c4,c5,c6,c7,c8,c9,
    d1,d2,d3,d4,d5,d6,d7,d8,d9,e1,e2,e3,e4,e5,e6,e7,e8,e9,f1,f2,f3,f4,f5,f6,f7,f8,f9,
    g1,g2,g3,g4,g5,g6,g7,g8,g9,h1,h2,h3,h4,h5,h6,h7,h8,h9,i1,i2,i3,i4,i5,i6,i7,i8,i9};
    cout<<"Board Generated!"<<endl;
    cout<<"Guess based on its location on the board from 1-81."<<endl;
    cout<<"Player 1 starts!"<<endl;
    while(solved!=true){
        for(int i=1; i<=81;i++){
            cout<<gameState[i-1]<<" ";
            if(i%3==0){
                cout<<"|";
            }
            if(i%9==0){
                cout<<endl;
            }
            if(i%27==0){
                cout<<"---------------------"<<endl;
            }
        }
        cout<<"Type location: ";
        cin>>locat;
        cout<<endl<<"Type guess: ";
        cin>>playerGuess;
        cout<<endl;
        if(matrix[locat-1]==playerGuess){
            gameState[locat-1]=playerGuess;
            if(missCount%2==1){
                ++player2;
                cout<<"Player 2 score: "<<player1<<endl;
            }
            else{
                ++player1;
                cout<<"Player 1 score: "<<player2<<endl;
            }
        }
        else{
            ++missCount;
            if(missCount%2==0){
                cout<<"Player 1's turn!"<<endl;
            }
            else{
                cout<<"Player 2's turn!"<<endl;
            }
        }
        for(int i=0;i<81;i++){
            if(gameState[i]==0){
                ++missing;
            }
        }
        switch(missing){
            case 0:solved=true;
            break;
            default:missing=0;
            break;
        }
    }
    if(solved==true){
        cout<<"Player 1: "<<player1<<" Player 2: "<<player2<<endl;
    if(player1>player2){
        cout<<"Player 1 wins!"<<endl;
    }
    else if(player1<player2){
        cout<<"Player 2 wins!"<<endl;
    }
    else{
        cout<<"Tie game!"<<endl;
        }
    }
}

void GenerateBoard(int a){
    int a1,a2,a3,a4,a5,a6,a7,a8,a9,b1,b2,b3,b4,b5,b6,b7,b8,b9,c1,c2,c3,c4,c5,c6,c7,c8,c9;
    int d1,d2,d3,d4,d5,d6,d7,d8,d9,e1,e2,e3,e4,e5,e6,e7,e8,e9,f1,f2,f3,f4,f5,f6,f7,f8,f9;
    int g1,g2,g3,g4,g5,g6,g7,g8,g9,h1,h2,h3,h4,h5,h6,h7,h8,h9,i1,i2,i3,i4,i5,i6,i7,i8,i9;
    int matrix[81];
    if(a>10||a<=0){
        cout<<"Improper map number"<<endl;
    }
    else{
        switch(a){
            case 1:
                a1=9, a2=1, a3=5, a4=2, a5=3, a6=6, a7=4, a8=7, a9=8;
                b1=4, b2=3, b3=2, b4=8, b5=1, b6=7, b7=9, b8=6, b9=5;
                c1=8, c2=6, c3=7, c4=4, c5=9, c6=5, c7=1, c8=2, c9=3;
                d1=2, d2=9, d3=1, d4=6, d5=8, d6=4, d7=3, d8=5, d9=7;
                e1=5, e2=7, e3=3, e4=9, e5=2, e6=1, e7=6, e8=8, e9=4;
                f1=6, f2=8, f3=4, f4=5, f5=7, f6=3, f7=2, f8=9, f9=1;
                g1=3, g2=4, g3=6, g4=7, g5=5, g6=2, g7=8, g8=1, g9=9;
                h1=1, h2=5, h3=8, h4=3, h5=6, h6=9, h7=7, h8=4, h9=2;
                i1=7, i2=2, i3=9, i4=1, i5=4, i6=8, i7=5, i8=3, i9=6;
                break;
            case 2:
                a1=2, a2=9, a3=6, a4=8, a5=3, a6=5, a7=7, a8=1, a9=4;
                b1=1, b2=8, b3=7, b4=4, b5=6, b6=9, b7=3, b8=5, b9=2;
                c1=4, c2=3, c3=5, c4=7, c5=2, c6=1, c7=9, c8=6, c9=8;
                d1=6, d2=4, d3=3, d4=5, d5=7, d6=2, d7=1, d8=8, d9=9;
                e1=9, e2=1, e3=2, e4=6, e5=4, e6=8, e7=5, e8=7, e9=3;
                f1=7, f2=5, f3=8, f4=9, f5=1, f6=3, f7=2, f8=4, f9=6;
                g1=8, g2=7, g3=1, g4=2, g5=9, g6=6, g7=4, g8=3, g9=5;
                h1=5, h2=2, h3=4, h4=3, h5=8, h6=7, h7=6, h8=9, h9=1;
                i1=3, i2=6, i3=9, i4=1, i5=5, i6=4, i7=8, i8=2, i9=7;
                break;
            case 3:
                a1=7, a2=3, a3=2, a4=9, a5=6, a6=5, a7=1, a8=4, a9=8;
                b1=9, b2=1, b3=8, b4=7, b5=4, b6=3, b7=6, b8=2, b9=5;
                c1=6, c2=5, c3=4, c4=1, c5=2, c6=8, c7=3, c8=7, c9=9;
                d1=4, d2=9, d3=6, d4=5, d5=7, d6=2, d7=8, d8=1, d9=3;
                e1=5, e2=7, e3=1, e4=3, e5=8, e6=4, e7=2, e8=9, e9=6;
                f1=2, f2=8, f3=3, f4=6, f5=1, f6=9, f7=4, f8=5, f9=7;
                g1=8, g2=6, g3=9, g4=2, g5=5, g6=1, g7=7, g8=3, g9=4;
                h1=3, h2=2, h3=7, h4=4, h5=9, h6=6, h7=5, h8=8, h9=1;
                i1=1, i2=4, i3=5, i4=8, i5=3, i6=7, i7=9, i8=6, i9=2;
                break;
            case 4:
                a1=2, a2=3, a3=4, a4=1, a5=5, a6=8, a7=6, a8=9, a9=7;
                b1=9, b2=5, b3=6, b4=4, b5=7, b6=3, b7=1, b8=8, b9=2;
                c1=1, c2=7, c3=8, c4=2, c5=6, c6=9, c7=4, c8=3, c9=5;
                d1=6, d2=4, d3=3, d4=9, d5=2, d6=5, d7=7, d8=1, d9=8;
                e1=8, e2=1, e3=5, e4=7, e5=4, e6=6, e7=3, e8=2, e9=9;
                f1=7, f2=2, f3=9, f4=3, f5=8, f6=1, f7=5, f8=6, f9=4;
                g1=5, g2=9, g3=2, g4=6, g5=3, g6=7, g7=8, g8=4, g9=1;
                h1=3, h2=8, h3=1, h4=5, h5=9, h6=4, h7=2, h8=7, h9=6;
                i1=4, i2=6, i3=7, i4=8, i5=1, i6=2, i7=9, i8=5, i9=3;
                break;
            case 5:
                a1=1, a2=3, a3=6, a4=5, a5=2, a6=4, a7=7, a8=9, a9=8;
                b1=8, b2=9, b3=5, b4=3, b5=6, b6=7, b7=1, b8=2, b9=4;
                c1=7, c2=2, c3=4, c4=9, c5=8, c6=1, c7=3, c8=5, c9=6;
                d1=5, d2=8, d3=3, d4=6, d5=4, d6=9, d7=2, d8=7, d9=1;
                e1=2, e2=6, e3=1, e4=8, e5=7, e6=3, e7=9, e8=4, e9=5;
                f1=4, f2=7, f3=9, f4=1, f5=5, f6=2, f7=6, f8=8, f9=3;
                g1=6, g2=4, g3=2, g4=7, g5=1, g6=8, g7=5, g8=3, g9=9;
                h1=9, h2=5, h3=7, h4=4, h5=3, h6=6, h7=8, h8=1, h9=2;
                i1=3, i2=1, i3=8, i4=2, i5=9, i6=5, i7=4, i8=6, i9=7;
                break;
            case 6:
                a1=1, a2=9, a3=2, a4=7, a5=8, a6=4, a7=5, a8=6, a9=3;
                b1=5, b2=3, b3=7, b4=6, b5=2, b6=9, b7=8, b8=4, b9=1;
                c1=4, c2=8, c3=6, c4=1, c5=5, c6=3, c7=9, c8=7, c9=2;
                d1=9, d2=1, d3=5, d4=3, d5=4, d6=8, d7=7, d8=3, d9=6;
                e1=6, e2=4, e3=8, e4=9, e5=7, e6=2, e7=1, e8=3, e9=5;
                f1=7, f2=2, f3=3, f4=5, f5=1, f6=6, f7=4, f8=9, f9=8;
                g1=2, g2=6, g3=1, g4=4, g5=9, g6=5, g7=3, g8=8, g9=7;
                h1=3, h2=5, h3=9, h4=8, h5=6, h6=7, h7=2, h8=1, h9=4;
                i1=8, i2=7, i3=4, i4=2, i5=3, i6=1, i7=6, i8=5, i9=9;
                break;
            case 7:
                a1=4, a2=5, a3=1, a4=3, a5=9, a6=2, a7=7, a8=8, a9=6;
                b1=9, b2=2, b3=3, b4=8, b5=6, b6=7, b7=1, b8=4, b9=5;
                c1=8, c2=6, c3=7, c4=1, c5=5, c6=4, c7=3, c8=2, c9=9;
                d1=1, d2=3, d3=6, d4=5, d5=4, d6=9, d7=2, d8=7, d9=8;
                e1=2, e2=4, e3=5, e4=7, e5=8, e6=3, e7=6, e8=9, e9=1;
                f1=7, f2=9, f3=8, f4=6, f5=2, f6=1, f7=4, f8=5, f9=3;
                g1=5, g2=8, g3=2, g4=4, g5=3, g6=6, g7=9, g8=1, g9=7;
                h1=6, h2=1, h3=9, h4=2, h5=7, h6=5, h7=8, h8=3, h9=4;
                i1=3, i2=7, i3=4, i4=9, i5=1, i6=8, i7=5, i8=6, i9=2;
                break;
            case 8:
                a1=2, a2=7, a3=9, a4=1, a5=6, a6=8, a7=3, a8=5, a9=4;
                b1=6, b2=5, b3=4, b4=3, b5=7, b6=2, b7=8, b8=1, b9=9;
                c1=1, c2=8, c3=3, c4=9, c5=5, c6=4, c7=6, c8=2, c9=7;
                d1=8, d2=9, d3=6, d4=2, d5=4, d6=3, d7=5, d8=7, d9=1;
                e1=3, e2=2, e3=1, e4=7, e5=8, e6=5, e7=4, e8=9, e9=6;
                f1=7, f2=4, f3=5, f4=6, f5=9, f6=1, f7=2, f8=3, f9=8;
                g1=5, g2=3, g3=7, g4=4, g5=1, g6=6, g7=9, g8=8, g9=2;
                h1=9, h2=6, h3=2, h4=8, h5=3, h6=7, h7=1, h8=4, h9=5;
                i1=4, i2=1, i3=8, i4=5, i5=2, i6=9, i7=7, i8=6, i9=3;
                break;
            case 9:
                a1=2, a2=9, a3=6, a4=7, a5=3, a6=8, a7=4, a8=1, a9=5;
                b1=1, b2=7, b3=8, b4=6, b5=5, b6=4, b7=9, b8=2, b9=3;
                c1=5, c2=3, c3=4, c4=9, c5=1, c6=2, c7=6, c8=8, c9=9;
                d1=6, d2=5, d3=7, d4=8, d5=2, d6=1, d7=3, d8=4, d9=9;
                e1=8, e2=1, e3=9, e4=4, e5=6, e6=3, e7=7, e8=5, e9=8;
                f1=3, f2=4, f3=2, f4=5, f5=7, f6=9, f7=1, f8=6, f9=8;
                g1=9, g2=2, g3=1, g4=3, g5=4, g6=5, g7=8, g8=7, g9=6;
                h1=7, h2=8, h3=5, h4=1, h5=9, h6=6, h7=2, h8=3, h9=4;
                i1=4, i2=6, i3=3, i4=2, i5=8, i6=7, i7=5, i8=9, i9=1;
                break;
            case 10:
                a1=6, a2=1, a3=2, a4=8, a5=3, a6=4, a7=9, a8=5, a9=7;
                b1=3, b2=9, b3=5, b4=6, b5=7, b6=2, b7=8, b8=1, b9=4;
                c1=7, c2=8, c3=4, c4=1, c5=9, c6=5, c7=3, c8=6, c9=2;
                d1=8, d2=5, d3=9, d4=4, d5=1, d6=3, d7=2, d8=7, d9=6;
                e1=4, e2=6, e3=3, e4=2, e5=8, e6=7, e7=5, e8=9, e9=1;
                f1=2, f2=7, f3=1, f4=5, f5=6, f6=9, f7=4, f8=8, f9=3;
                g1=1, g2=2, g3=6, g4=3, g5=5, g6=8, g7=7, g8=4, g9=9;
                h1=9, h2=4, h3=8, h4=7, h5=2, h6=1, h7=6, h8=3, h9=5;
                i1=5, i2=3, i3=7, i4=9, i5=4, i6=6, i7=1, i8=2, i9=8;
            break;
    }
    int matrix[] = {a1,a2,a3,a4,a5,a6,a7,a8,a9,b1,b2,b3,b4,b5,b6,b7,b8,b9,c1,c2,c3,c4,c5,c6,c7,c8,c9,
    d1,d2,d3,d4,d5,d6,d7,d8,d9,e1,e2,e3,e4,e5,e6,e7,e8,e9,f1,f2,f3,f4,f5,f6,f7,f8,f9,
    g1,g2,g3,g4,g5,g6,g7,g8,g9,h1,h2,h3,h4,h5,h6,h7,h8,h9,i1,i2,i3,i4,i5,i6,i7,i8,i9};
    }
    newGame(matrix, a);
}

int main(){
    int matrix[9][9];
    int mapNum;
    cout<<"Type which Map you want from 1-10 based on low to high difficulty: ";
    cin>>mapNum;
    GenerateBoard(mapNum);
    /* Logic needed to print out still- recursive function to print out the unsolved board while it isnt solved,
    update unsolved board to correct numbers, display scoreboard
    */
    return 0;
}
